syntax = "proto3";
package tuplex.messages;

enum FileFormat {
    FF_UNKNOWN = 0;
    FF_TUPLEX = 1;
    FF_CSV = 2;
    FF_TEXT = 3;
}

enum EndPointMode {
    EPM_UNKNOWN = 0;
    EPM_MEMORY = 1;
    EPM_FILE = 2;
    EPM_HASHTABLE = 3;
}

enum MessageType {
    MT_UNKNOWN = 0;
    MT_WARMUP = 1;
    MT_TRANSFORM = 2;
}

message TransformStage {
    bytes bitcode = 1;
    repeated string inputColumns = 2;
    repeated string outputColumns = 3;

    string readSchema = 4;
    string inputSchema = 5;
    string outputSchema = 6;
    string normalCaseInputSchema = 7;
    string normalCaseOutputSchema = 8;
    uint32 outputDataSetID = 9;
    uint32 inputNodeID = 10;
    EndPointMode inputMode = 11;
    EndPointMode outputMode = 12;
    repeated uint32 inputColumnsToKeep = 13;
    string outputURI = 14;
    FileFormat inputFormat = 15;
    FileFormat outputFormat = 16;
    bool persistSeparateCases = 17;
    string funcStageName = 18;
    string funcMemoryWriteCallbackName = 19;
    string funcFileWriteCallbackName = 20;
    string funcHashWriteCallbackName = 21;
    string funcExceptionCallback = 22;
    string funcInitStageName = 23;
    string funcReleaseStageName = 24;
    string resolveRowFunctionName = 25;
    string resolveRowWriteCallbackName = 26;
    string resolveRowExceptionCallbackName = 27;
    string resolveHashCallbackName = 28;
    uint32 stageNumber = 29;
    uint32 numColumns = 30;
    string pyCode = 31;
    string pyPipelineName = 32;

    // file input + output params as dict
    map<string, string> inputParameters = 33;
    map<string, string> outputParameters = 34;
}

message WorkerSettings {
    optional uint32 numThreads = 1;
    optional uint32 normalBufferSize = 2;
    optional uint32 exceptionBufferSize = 3;
    optional uint32 hashBufferSize = 4;
    optional string spillRootURI = 5;
    optional uint32 runTimeMemoryPerThread = 6;
    optional uint32 runTimeMemoryPerThreadBlockSize = 7;
    optional bool allowNumericTypeUnification = 8;
}

message WarmupMessage {
    uint32 invocationCount = 1;
    uint32 timeOutInMs = 2;
}

message InvocationRequest {
    repeated string inputURIS = 1;
    repeated uint64 inputSizes = 2;
    string outputURI = 3;

    MessageType type = 4;
    WorkerSettings settings = 5;

    optional TransformStage stage = 6;
    optional WarmupMessage warmup = 7;
}

message InvocationResponse {
    enum Status {
        SUCCESS = 0;
        ERROR = 1;
    }
    Status status = 1;
    string errorMessage = 2;
    MessageType type = 3;

    repeated string inputURIS = 4;
    repeated string outputURIs = 5;

    uint64 numRowsWritten = 6;
    uint64 numExceptions = 7;
    uint64 numBytesWritten = 8;

    bool containerReused = 9;
    double awsInitTime = 10;
    string containerID = 11;
    double taskExecutionTime = 12;
    double remainingLambdaTime = 13;
    map<string, uint64> s3Stats = 14;
    map<string, double> breakdownTimes = 15;

    repeated string warmedupContainers = 16;
}
